{"version":3,"file":"toggle.component.js","sourceRoot":"","sources":["../src/toggle.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACtD,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AACzC,OAAO,YAAY,MAAM,iBAAiB,CAAC;AAC3C,OAAO,QAAQ,MAAM,mBAAmB,CAAC;AAGzC,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,IAAI;IAAhC;;QAG+B,UAAK,GAAG,KAAK,CAAC;QACd,OAAE,GAAG,KAAK,CAAC;QACX,aAAQ,GAAG,KAAK,CAAC;QAClB,WAAM,GAAG,KAAK,CAAC;QACf,WAAM,GAAG,KAAK,CAAC;QACf,UAAK,GAAG,EAAE,CAAC;IAgBzC,CAAC;IAdW,YAAY,CAAC,CAAM;QAC3B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;QAE5B,MAAM,YAAY,GAAG,IAAI,WAAW,CAAC,cAAc,EAAE;YACnD,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;YAC7B,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACnC,CAAC;IAES,MAAM;QACd,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;CACF,CAAA;AAvBe,sBAAe,GAAG,CAAC,YAAY,CAAC,CAAC;AAElB;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;qCAAe;AACd;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;kCAAY;AACX;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;wCAAkB;AAClB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;sCAAgB;AACf;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;sCAAgB;AACf;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;qCAAY;AAR5B,MAAM;IADlB,aAAa,CAAC,WAAW,CAAC;GACd,MAAM,CAwBlB;SAxBY,MAAM","sourcesContent":["import { customElement, property } from 'lit-element';\r\nimport { Base } from '@spectrum/sp-base';\r\nimport toggleStyles from './toggle.styles';\r\nimport template from './toggle.template';\r\n\r\n@customElement('sp-toggle')\r\nexport class Toggle extends Base {\r\n  public static componentStyles = [toggleStyles];\r\n\r\n  @property({ type: Boolean }) quiet = false;\r\n  @property({ type: Boolean }) ab = false;\r\n  @property({ type: Boolean }) disabled = false;\r\n  @property({ type: String }) labelA = false;\r\n  @property({ type: String }) labelB = false;\r\n  @property({ type: String }) value = '';\r\n\r\n  protected handleChange(e: any) {\r\n    this.value = e.target.value;\r\n\r\n    const changedEvent = new CustomEvent('valuechanged', {\r\n      detail: { value: this.value },\r\n      bubbles: true,\r\n      composed: true,\r\n    });\r\n    this.dispatchEvent(changedEvent);\r\n  }\r\n\r\n  protected render() {\r\n    return template.call(this);\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'sp-toggle': Toggle;\r\n  }\r\n}\r\n"]}